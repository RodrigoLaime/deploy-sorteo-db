{"mappings":";;;;;;;;;;;;;;;;AAAA;;AACA,MAAM,4BAAM;;;;AAKZ,MAAM,6BAAO;AACb,4CAA4C;AAC5C,0BAAI,GAAG,CAAC,eAAQ,MAAM,CAAC,iBAAU,iCAAW;;ACR5C;AAAA;AAEA,MAAM,+BAAS;IACb,MAAM;AACR;AAEA,4BAAiB;YAAE;AAAO;;;uCDKpB;AACN,MAAM,4BAAM,iCAAO,MAAM;AAEzB,MAAM,4BAAM,CAAC,sBAAsB,EAAE,0BAAI,oCAAoC,CAAC;AAE9E,4FAA4F,GAC5F,+CAA+C;AAC/C,0BAAmB,eAAO,OAAO;;AElBjC;;;AEAA;;AAIA,IAAI,+BAAS;AAEb,IAAI,oCAAc,IAAI,6BAAO;IACzB,MAAM;AACV;AAEA,4BAAiB,sBAAe,UAAU;;ADV1C;;AAGA,0EAA0E;AAC1E,IAAI,yCAAmB;IAErB,kCAAkC;IAElC,MAAM,CAAC,KAAK,MAAQ;QAElB,IAAI,SAAS,IAAI,IAAI;QACrB,QAAQ,GAAG,CAAC;QACZ,kBAAkB;QAClB,IAAI,SAAS,IAAI;QAEjB,kBAAkB;QAClB,OAAO,IAAI,GAAG,OAAO,IAAI;QAEzB,wBAAwB;QACxB,OAAO,IAAI,CAAC,CAAC,KAAK,aAAe;YAE/B,IAAI,OAAO,CAAC,YACV,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;gBAC1B,QAAQ;gBACR,SAAS;YACX;YAGF,0BAA0B;YAC1B,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;gBAC1B,QAAQ;4BACR;YACF;QAEF;IAEF;IAEA,4BAA4B;IAC5B,WAAW,CAAC,KAAK,MAAM;QACrB,IAAI,QAAQ,+BAAY,CAAC,IAAG,8BAA8B;QAC1D,MAAM,IAAI,CAAC,SAAS,IAAI,CAAC,CAAC,KAAK,OAAS;YACtC,IAAG,KACD,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;gBAC1B,QAAQ;gBACR,SAAS;YACX;YAEF,qBAAqB;YACrB,IAAG,CAAC,MACF,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;gBAC1B,QAAQ;gBACR,SAAS;YACX;YAEF,kBAAkB;YAClB,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;gBAC1B,QAAQ;sBACR;YACF;QACF;IACF;AAGF;AAEA,4BAAiB;;;AD9DjB,oCAAoC;AACpC,IAAI,+BAAS;AAEb,6BAAO,IAAI,CAAC,WAAW;AACvB,6BAAO,GAAG,CAAC,WAAW;AACtB;;0DAE0D,GAE1D,4BAAiB;;;AFSjB,oBAAoB;AACpB,0BAAI,GAAG,CAAC,6BAAsB;IAAE,UAAU,KAAK;AAAC;AAChD,mDAAmD;AACnD,0BAAI,GAAG,CAAC;AAER,8EAA8E;AAC9E,0BAAI,GAAG,CAAC,CAAC,KAAK,KAAK,OAAS;IAC1B,IAAI,MAAM,CAAC,+BAA+B;IAC1C,IAAI,MAAM,CAAC,+BAA+B;IAC1C,IAAI,MAAM,CAAC,gCAAgC;IAC3C,IAAI,MAAM,CAAC,SAAS;IACpB;AACF;AAEA,uCAAuC;AACvC,0BAAI,GAAG,CAAC,QAAQ;AAChB,wBAAiB,2BAAK;IAAE,iBAAiB,IAAI;AAAC,GAC3C,IAAI,CAAC,IAAM;IACV,QAAQ,GAAG,CAAC;IACZ,0BAAI,MAAM,CAAC,4BAAM,IAAM;QACrB,QAAQ,GAAG,CAAC,4BAA4B;IAC1C;AACF,GAOF,oBAAoB","sources":["src/index.js","config.js","src/routes/rutaSorteo.js","src/controller/sorteoController.js","src/models/schema.js"],"sourcesContent":["const express = require('express');\r\nconst app = express();\r\nconst mongoose = require('mongoose');\r\nconst bodyParser = require('body-parser');\r\nconst path = require('path');\r\n\r\nconst port = 3000;\r\n//archivos estaticos busca  el archivo  htlm\r\napp.use(express.static(path.join(__dirname, './public')));\r\n\r\n//envairoment\r\nconst { config } = require('../config')\r\nconst api = config.apiKey;\r\n\r\nconst url = `mongodb+srv://hp-envy:${api}@cluster0.kpp1aja.mongodb.net/sorteo`;\r\n\r\n/* const url = 'mongodb+srv://hp-envy:q1kMHqGtFxS57YUI@cluster0.kpp1aja.mongodb.net/sorteo' */\r\n// configuracion para evitar fallo de coneccion\r\nmongoose.Promise = global.Promise;\r\n\r\nvar router = require('./routes/rutaSorteo');\r\n\r\n//cargar body parser\r\napp.use(bodyParser.urlencoded({ extended: false }));\r\n//cualquier tipo de peticion la convertimos en json\r\napp.use(bodyParser.json());\r\n\r\n//midleware activar el cors para permitir peticion ajax y http desde el front \r\napp.use((req, res, next) => {\r\n  res.header('Access-Control-Allow-Origin', '*');\r\n  res.header('Access-Control-Allow-Header', 'Authorization, X-API-KEY, Origin, X-Requested-With, Access-Control-Allow-Request-Method');\r\n  res.header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, DELETE');\r\n  res.header('Allow', 'GET, POST, OPTIONS, PUT, DELETE');\r\n  next();\r\n});\r\n\r\n//cargar los archivos de ruta de la app\r\napp.use('/api', router);\r\nmongoose.connect(url, { useNewUrlParser: true })\r\n  .then(() => {\r\n    console.log('Coneccion exito a la basde de datos mongoDB');\r\n    app.listen(port, () => {\r\n      console.log('corriendo en el puerto ' + port);\r\n    })\r\n  })\r\n\r\n\r\n\r\n\r\n\r\n\r\n/* q1kMHqGtFxS57YUI */","require('dotenv').config()\r\n\r\nconst config = {\r\n  apiKey: process.env.API_KEY,\r\n}\r\n\r\nmodule.exports = { config }","var express = require('express');\r\n\r\nvar sorteoController = require('../controller/sorteoController');\r\n\r\n// llamamos al objeto router express\r\nvar router = express.Router();\r\n\r\nrouter.post('/sorteo', sorteoController.save);\r\nrouter.get('/winner', sorteoController.getSorteo);\r\n/*\r\nrouter.delete('./delete/id', sorteoController.deleteSorteo);\r\nrouter.put('./update/id', sorteoController.updateSorteo); */\r\n\r\nmodule.exports = router;","const schema = require('../models/schema');\r\nvar Schema = require('../models/schema');\r\n\r\n//creamos un objeto controller para disponer de todos los métodos de ruta:\r\nvar sorteoController = {\r\n\r\n  //Método para guardar un artículo:\r\n\r\n  save: (req, res) => {\r\n\r\n    var params = req.body;\r\n    console.log(params);\r\n    //Objeto a guardar\r\n    var schema = new Schema();\r\n\r\n    // Asignar valores\r\n    schema.name = params.name;\r\n\r\n    // Guardamos el articulo\r\n    schema.save((err, userWinner) => {\r\n\r\n      if (err || !userWinner) {\r\n        return res.status(404).send({\r\n          status: 'error',\r\n          message: 'La nota no se ha guardado !!!'\r\n        });\r\n      }\r\n\r\n      // Devolver una respuesta \r\n      return res.status(200).send({\r\n        status: 'success',\r\n        userWinner\r\n      });\r\n\r\n    });\r\n\r\n  },\r\n\r\n  //metodo para obtener winner\r\n  getSorteo: (req, res)=>{\r\n    let query = schema.find({});//devuelve todo en la consulta\r\n    query.sort('-date').exec((err, data) => {\r\n      if(err){\r\n        return res.status(500).send({\r\n          status: 'Error',\r\n          message: 'Error al extraer los datos'\r\n        });\r\n      }\r\n      //si no existen datos\r\n      if(!data){\r\n        return res.status(404).send({\r\n          status: 'Error',\r\n          message: 'No hay datos para mostrar'\r\n        });\r\n      }\r\n      //si existen datos\r\n      return res.status(200).send({\r\n        status: 'Succes',\r\n        data,\r\n      });\r\n    });\r\n  },\r\n\r\n  \r\n}\r\n\r\nmodule.exports = sorteoController","'use strict'\r\n\r\nconst mongoose = require('mongoose');\r\n\r\nvar Schema = mongoose.Schema;\r\n\r\nvar mongoSchema = new Schema({\r\n    name: String,\r\n});\r\n\r\nmodule.exports = mongoose.model('winner', mongoSchema);"],"names":[],"version":3,"file":"index.js.map"}